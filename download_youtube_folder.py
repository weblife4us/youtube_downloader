"""
YouTube Video Downloader
========================
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç yt-dlp (–≤–µ—Ä—Å–∏—è 2025.9.5) - —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- pip install yt-dlp
- pip install auto-py-to-exe (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è exe)
- pip install PyInstaller (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è exe)
- ffmpeg (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç—Å—è –≤ PATH)
- pip install --upgrade auto-py-to-exe
- pip install --upgrade pyinstaller
"""

import yt_dlp
import sys
import os
import argparse
import shutil
from datetime import datetime
from pathlib import Path
from typing import Optional, List


class YouTubeDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    
    def __init__(self):
        self.ffmpeg_path = self._find_ffmpeg()
        
    def _find_ffmpeg(self) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
        possible_paths = [
            'C:\\ProgramData\\chocolatey\\bin\\ffmpeg.exe',
            'C:\\Program Files\\ffmpeg\\bin\\ffmpeg.exe',
            'C:\\ffmpeg\\bin\\ffmpeg.exe'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg –≤ PATH
        ffmpeg_path = shutil.which('ffmpeg')
        if ffmpeg_path:
            return ffmpeg_path
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
        for path in possible_paths:
            if os.path.exists(path):
                return path
                
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –Ω–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
        return None
    
    def _progress_hook(self, d):
        """Hook –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if d['status'] == 'downloading':
            if 'total_bytes' in d:
                percent = d['downloaded_bytes'] / d['total_bytes'] * 100
                print(f"\rüì• –ó–∞–≥—Ä—É–∑–∫–∞: {percent:.1f}% ({d['downloaded_bytes']} / {d['total_bytes']} –±–∞–π—Ç)", end='')
            elif '_percent_str' in d:
                print(f"\rüì• –ó–∞–≥—Ä—É–∑–∫–∞: {d['_percent_str']}", end='')
        elif d['status'] == 'finished':
            print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {d['filename']}")
    
    def get_video_info(self, video_url: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            ydl_opts = {'quiet': True}
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                return ydl.extract_info(video_url, download=False)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {str(e)}")
            return None

    def download_video(self, video_url: str, output_dir: Optional[str] = None, 
                      quality: str = 'best', audio_only: bool = False) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        
        Args:
            video_url: URL –≤–∏–¥–µ–æ
            output_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            quality: –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ ('best', 'worst', '720p', '1080p', etc.)
            audio_only: –°–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
        """
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
            ydl_opts = {
                'outtmpl': os.path.join(output_dir or '', '%(title)s.%(ext)s'),
                'progress_hooks': [self._progress_hook],
                'extractaudio': audio_only,
                'audioformat': 'mp3' if audio_only else None,
            }
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
            if audio_only:
                ydl_opts['format'] = 'bestaudio/best'
            else:
                if quality == 'best':
                    ydl_opts['format'] = 'bestvideo[ext=mp4][height<=?2160]+bestaudio[ext=m4a]/bestvideo+bestaudio/best'
                elif quality == 'worst':
                    ydl_opts['format'] = 'worst'
                elif quality in ['144p', '240p', '360p', '480p', '720p', '1080p', '1440p', '2160p']:
                    height = quality[:-1]
                    ydl_opts['format'] = f'bestvideo[height<={height}][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<={height}]+bestaudio/best[height<={height}]'
                else:
                    ydl_opts['format'] = quality
                
                ydl_opts['merge_output_format'] = 'mp4'
            
            # –ü—É—Ç—å –∫ ffmpeg –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            if self.ffmpeg_path:
                ydl_opts['ffmpeg_location'] = self.ffmpeg_path
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            info = self.get_video_info(video_url)
            if info:
                title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                duration = info.get('duration', 0)
                uploader = info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                print(f"\nüì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                print(f"üë§ –ê–≤—Ç–æ—Ä: {uploader}")
                if duration:
                    minutes = duration // 60
                    seconds = duration % 60
                    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes:02d}:{seconds:02d}")
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([video_url])
                
            return True
            1
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {video_url}: {str(e)}")
            return False

    def get_unique_folder(self, base_folder: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        folder = base_folder
        counter = 1
        while os.path.exists(folder):
            folder = f"{base_folder}_{counter}"
            counter += 1
        return folder

    def download_from_file(self, file_path: str, quality: str = 'best', 
                          audio_only: bool = False) -> dict:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º URL
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (—É—Å–ø–µ—à–Ω–æ, –æ—à–∏–±–∫–∏, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        """
        stats = {'total': 0, 'success': 0, 'errors': 0, 'error_urls': []}
        
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as file:
                urls = [line.strip() for line in file if line.strip() and not line.startswith('#')]
            
            if not urls:
                print("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.")
                return stats
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            base_name = Path(file_path).stem
            date_str = datetime.now().strftime("%y-%m-%d_%H-%M")
            base_folder = Path(file_path).parent / f"{base_name}_{date_str}"
            output_dir = self.get_unique_folder(str(base_folder))
            os.makedirs(output_dir, exist_ok=True)
            
            print(f"\nüìÅ –§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(urls)} URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")
            if audio_only:
                print("üéµ –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3)")
            print("-" * 60)
            
            stats['total'] = len(urls)
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ URL
            for i, url in enumerate(urls, 1):
                print(f"\n[{i}/{len(urls)}] üîó {url}")
                
                success = self.download_video(url, output_dir, quality, audio_only)
                if success:
                    stats['success'] += 1
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                else:
                    stats['errors'] += 1
                    stats['error_urls'].append(url)
                    print("‚ùå –û—à–∏–±–∫–∞!")
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
                if i < len(urls):
                    print("‚è±Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
                    import time
                    time.sleep(2)
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n" + "="*60)
            print("üìä –ò–¢–û–ì–ò –ó–ê–ì–†–£–ó–ö–ò:")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['success']}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
            print(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {output_dir}")
            
            if stats['error_urls']:
                print(f"\n‚ùå URL —Å –æ—à–∏–±–∫–∞–º–∏:")
                for url in stats['error_urls']:
                    print(f"   ‚Ä¢ {url}")
            
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        
        return stats


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description="YouTube Video Downloader v2.0 - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python download_youtube_folder.py "https://youtube.com/watch?v=..."
  python download_youtube_folder.py --file urls.txt --quality 720p
  python download_youtube_folder.py --file urls.txt --audio-only
  python download_youtube_folder.py "https://youtube.com/watch?v=..." --quality 1080p
        """
    )
    
    parser.add_argument('url', nargs='?', help='URL –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')
    parser.add_argument('--file', '-f', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å URL-–∞–¥—Ä–µ—Å–∞–º–∏')
    parser.add_argument('--quality', '-q', type=str, default='best',
                       choices=['best', 'worst', '144p', '240p', '360p', '480p', '720p', '1080p', '1440p', '2160p'],
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: best)')
    parser.add_argument('--audio-only', '-a', action='store_true',
                       help='–°–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3')
    
    args = parser.parse_args()
    
    print("üé• YouTube Video Downloader v2.0")
    print("=" * 40)
    print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è yt-dlp –≤–µ—Ä—Å–∏–∏ 2025.9.5")
    print()
    
    downloader = YouTubeDownloader()
    
    try:
        if args.file:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
            if not os.path.exists(args.file):
                print(f"‚ùå –§–∞–π–ª {args.file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            stats = downloader.download_from_file(args.file, args.quality, args.audio_only)
            
        elif args.url:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ URL
            print(f"üîó URL: {args.url}")
            print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {args.quality}")
            if args.audio_only:
                print("üéµ –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3)")
            
            success = downloader.download_video(args.url, quality=args.quality, audio_only=args.audio_only)
            if success:
                print("\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏!")
                
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            print("üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
            print("-" * 20)
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1 - –°–∫–∞—á–∞—Ç—å –æ–¥–∏–Ω URL\n2 - –°–∫–∞—á–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
            
            if choice == '2':
                file_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å URL: ").strip()
                if not file_path:
                    print("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω!")
                    return
                if not os.path.exists(file_path):
                    print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return
                
                # –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
                print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:")
                qualities = ['best', '1080p', '720p', '480p', '360p', 'worst']
                for i, q in enumerate(qualities, 1):
                    print(f"{i} - {q}")
                
                q_choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ (1-{len(qualities)}, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
                try:
                    quality = qualities[int(q_choice)-1] if q_choice else 'best'
                except (ValueError, IndexError):
                    quality = 'best'
                
                # –í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
                audio_choice = input("üéµ –°–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
                audio_only = audio_choice in ['y', 'yes', '–¥–∞']
                
                stats = downloader.download_from_file(file_path, quality, audio_only)
                
            else:
                video_url = input("üîó –í–≤–µ–¥–∏—Ç–µ URL YouTube –≤–∏–¥–µ–æ: ").strip()
                if not video_url:
                    print("‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω!")
                    return
                
                # –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
                print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:")
                qualities = ['best', '1080p', '720p', '480p', '360p', 'worst']
                for i, q in enumerate(qualities, 1):
                    print(f"{i} - {q}")
                
                q_choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ (1-{len(qualities)}, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
                try:
                    quality = qualities[int(q_choice)-1] if q_choice else 'best'
                except (ValueError, IndexError):
                    quality = 'best'
                
                # –í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
                audio_choice = input("üéµ –°–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
                audio_only = audio_choice in ['y', 'yes', '–¥–∞']
                
                success = downloader.download_video(video_url, quality=quality, audio_only=audio_only)
                if success:
                    print("\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏!")
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        input("\n‚è≠Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main()